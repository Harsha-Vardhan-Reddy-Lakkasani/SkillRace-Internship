                                                               SkillRace Internship

								Phase 4 - Mini Project

Design an 3D TIC-TAC-TOE Game in 3 X 3 Grid Using Python 

Source Code : 

class TicTacToe3D:
    def __init__(self):
        self.board = [[[None for _ in range(3)] for _ in range(3)] for _ in range(3)]
        self.current_player = "X"

    def print_board(self):
        for layer in range(3):
            print(f"Layer {layer + 1}:")
            for row in range(3):
                print([self.board[layer][row][col] if self.board[layer][row][col] is not None else '.' for col in range(3)])
            print()

    def check_winner(self):
        lines = []
        
        for layer in range(3):
            for i in range(3):
                lines.append([self.board[layer][i][j] for j in range(3)])
                lines.append([self.board[layer][j][i] for j in range(3)])
            lines.append([self.board[layer][i][i] for i in range(3)])
            lines.append([self.board[layer][i][2-i] for i in range(3)])

        for i in range(3):
            for j in range(3):
                lines.append([self.board[k][i][j] for k in range(3)])
                lines.append([self.board[i][j][k] for k in range(3)])
                lines.append([self.board[i][k][j] for k in range(3)])

        lines.append([self.board[i][i][i] for i in range(3)])
        lines.append([self.board[i][i][2-i] for i in range(3)])
        lines.append([self.board[i][2-i][i] for i in range(3)])
        lines.append([self.board[2-i][i][i] for i in range(3)])
        
        for line in lines:
            if line[0] is not None and line.count(line[0]) == 3:
                return line[0]
        return None

    def is_draw(self):
        for layer in range(3):
            for row in range(3):
                for col in range(3):
                    if self.board[layer][row][col] is None:
                        return False
        return True

    def make_move(self, layer, row, col):
        if self.board[layer][row][col] is None:
            self.board[layer][row][col] = self.current_player
            winner = self.check_winner()
            if winner:
                self.print_board()
                print(f"Player {winner} wins!")
                return True
            elif self.is_draw():
                self.print_board()
                print("It's a draw!")
                return True
            self.current_player = "O" if self.current_player == "X" else "X"
        else:
            print("Invalid move! Try again.")
        return False

    def start_game(self):
        game_over = False
        while not game_over:
            self.print_board()
            print(f"Player {self.current_player}'s turn")
            layer = int(input("Enter the layer (1-3): ")) - 1
            row = int(input("Enter the row (1-3): ")) - 1
            col = int(input("Enter the column (1-3): ")) - 1
            game_over = self.make_move(layer, row, col)
game = TicTacToe3D()
game.start_game()

Output : 

Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player X's turn
Enter the layer (1-3): 2
Enter the row (1-3): 2
Enter the column (1-3): 1
Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['.', '.', '.']
['X', '.', '.']
['.', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player O's turn
Enter the layer (1-3): 2
Enter the row (1-3): 2
Enter the column (1-3): 1
Invalid move! Try again.
Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['.', '.', '.']
['X', '.', '.']
['.', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player O's turn
Enter the layer (1-3): 2
Enter the row (1-3): 3
Enter the column (1-3): 1
Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['.', '.', '.']
['X', '.', '.']
['O', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player X's turn
Enter the layer (1-3): 2
Enter the row (1-3): 2
Enter the column (1-3): 2
Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['.', '.', '.']
['X', 'X', '.']
['O', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player O's turn
Enter the layer (1-3): 2
Enter the row (1-3): 1
Enter the column (1-3): 1
Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['O', '.', '.']
['X', 'X', '.']
['O', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player X's turn
Enter the layer (1-3): 2
Enter the row (1-3): 2
Enter the column (1-3): 3
Layer 1:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Layer 2:
['O', '.', '.']
['X', 'X', 'X']
['O', '.', '.']

Layer 3:
['.', '.', '.']
['.', '.', '.']
['.', '.', '.']

Player X wins!